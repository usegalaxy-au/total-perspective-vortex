global:
  default_inherits: default

tools:
  default:
    cores: 2
    mem: cores * 3
    gpus: 0
    params:
      nativeSpec: '--cores {cores} --mem {mem}'
    env:
      TEST_JOB_SLOTS: "{cores}"
      TEST_ENTITY_PRIORITY: "{cores}"
      TEST_ENTITY_GPUS: "{gpus}"
    scheduling:
      require: []
      prefer:
        - general
      accept:
      reject:
        - pulsar
        - offline
    rules:
      - if: input_size < 2
        fail: Data size too small
  bwa:
    scheduling:
      require:
        - pulsar
  toolshed_hifiasm:
    cores: 1000
    rules:
      - if: input_size < 1000
        cores: 2
  inheritance_test_tool:
    scheduling:
      accept:
        - pulsar
      require:
        - inherited
  three_core_test_tool:
    scheduling:
      require:
        - local
    rules:
      - if: input_size > 3
        id: arbitrary_3_core_assignment
        cores: 3
  custom_tool:
    scheduling:
      require:
        - custom
  tool_with_handler_tags:
    scheduling:
      require:
        - dest_with_handler_tags
  tool_matching_abstract_dest:
    scheduling:
      require:
        - something_abstract
  tool_matching_abstract_inherited_dest:
    scheduling:
      require:
        - something_abstract
        - also_concrete
  tool_for_testing_cpu_acceptance_non_match:
    cores: 15
    mem: 53
    gpus: 2
    scheduling:
      require:
        - test_of_cpu_accepted
  tool_for_testing_gpu_acceptance_non_match:
    cores: 15
    mem: 53
    gpus: 1
    scheduling:
      require:
        - test_of_gpu_accepted
  tool_for_testing_mem_acceptance_non_match:
    cores: 15
    mem: 53
    gpus: 2
    scheduling:
      require:
        - test_of_mem_accepted
  tool_for_testing_cpu_acceptance_match:
    cores: 17
    mem: 68
    gpus: 2
    scheduling:
      require:
        - test_of_cpu_accepted
  tool_for_testing_gpu_acceptance_match:
    cores: 17
    mem: 68
    gpus: 2
    scheduling:
      require:
        - test_of_gpu_accepted
  tool_for_testing_mem_acceptance_match:
    cores: 17
    mem: 68
    gpus: 2
    scheduling:
      require:
        - test_of_mem_accepted
  tool_for_testing_cpu_acceptance_zero:
    cores: 0
    mem: 53
    gpus: 2
    scheduling:
      require:
        - test_of_cpu_accepted
  tool_for_testing_gpu_acceptance_zero:
    cores: 17
    mem: 68
    gpus: 0
    scheduling:
      require:
        - test_of_gpu_accepted
  tool_for_testing_mem_acceptance_zero:
    cores: 15
    mem: 0
    gpus: 2
    scheduling:
      require:
        - test_of_mem_accepted
  tool_for_testing_resource_clamping:
    cores: 16
    env:
      MY_TOOL_ENV: "cores: {cores} mem: {mem} gpus: {gpus}"
    scheduling:
      require:
        - test_of_resource_clamping

users:
  pulsar_canberra_user@act.au:
      rules:
        - id: pulsar_user_mapping_rule
          if: tool.id.startswith('toolshed') or tool.id.startswith('testtoolshed')
          scheduling:
            accept:
              - pulsar # pulsar must be in require/prefer/accept for a job to be scheduled to pulsar
              - offline # allow scheduling to a destination even when it is offline
            require:
              - pulsar-canberra

destinations:
  local:
    runner: local
    max_accepted_cores: 4
    max_accepted_mem: 16
    scheduling:
      accept:
        - local
      prefer:
        - general
    rules:
      - id: arbitrary_3_core_avoidance
        if: entity.cores == 3
        env:
          OK_SO_THIS_IS_MATCHING: it_is
        execute: |
          from tpv.core.entities import TryNextDestinationOrWait
          raise TryNextDestinationOrWait("Cannot run this job here at this time, may be available later, try elsewhere")
  k8s_environment:
    runner: k8s
    max_accepted_cores: 16
    max_accepted_mem: 64
    max_accepted_gpus: 2
    env:
      DOCKER_ENABLED: "true"
      SPECIAL_FLAG: "first"
    params:
      memory_requests: "{mem}"
      k8s_walltime_limit: "10"
    rules:
      - if: input_size > 10
        execute: |
          from tpv.core.entities import TryNextDestinationOrFail
          raise TryNextDestinationOrFail("job size too large for this destination")
    scheduling:
      prefer:
        - pulsar
  another_k8s_environment:
    runner: k8s
    max_accepted_cores: 16
    max_accepted_mem: 64
    max_accepted_gpus: 2
    env:
      SPECIAL_FLAG: "second"
      TEST_ENTITY_PRIORITY: "{cores*2}"
    params:
      memory_requests: "{mem*2}"
      k8s_walltime_limit: "20"
    rules:
      - if: input_size > 20
        execute: |
          from tpv.core.entities import TryNextDestinationOrFail
          raise TryNextDestinationOrFail("job size too large for this destination too")
    scheduling:
      prefer:
        - pulsar
        - highmem
  inherited_k8s_environment:
    inherits: another_k8s_environment
    max_accepted_cores: 16
    max_accepted_mem: 64
    max_accepted_gpus: 2
    env:
      SPECIAL_FLAG: "third"
    params:
      memory_requests: "{mem*3}"
    scheduling:
      require:
        - inherited
  custom_naming:
    runner: k8s
    destination_name_override: 'my-dest-with-{cores}-cores-{mem}-mem'
    max_accepted_cores: 16
    max_accepted_mem: 64
    max_accepted_gpus: 2
    env:
      SPECIAL_FLAG: "third"
    params:
      memory_requests: "{mem*3}"
    scheduling:
      require:
        - custom
  destination_with_handler_tags:
    runner: k8s
    tags:
      - registered_user_concurrent_jobs_20
    max_accepted_cores: 16
    max_accepted_mem: 64
    max_accepted_gpus: 2
    scheduling:
      require:
        - dest_with_handler_tags
  an_abstract_destination:
    runner: k8s
    abstract: true
    scheduling:
      require:
        - something_abstract
  my_concrete_destination:
    runner: k8s
    inherits: an_abstract_destination
    scheduling:
      require:
        - also_concrete
  destination_with_min_cpu_accepted:
    runner: k8s
    min_accepted_cores: 16
    min_accepted_mem: 64
    min_accepted_gpus: 2
    scheduling:
      require:
        - test_of_cpu_accepted
  destination_without_min_cpu_accepted:
    runner: k8s
    scheduling:
      require:
        - test_of_cpu_accepted
  destination_zero_max_cpu_accepted:
    runner: k8s
    max_accepted_cores: 0
    scheduling:
      require:
        - test_of_cpu_accepted
  destination_with_min_gpu_accepted:
    runner: k8s
    min_accepted_gpus: 2
    scheduling:
      require:
        - test_of_gpu_accepted
  destination_without_min_gpu_accepted:
    runner: k8s
    scheduling:
      require:
        - test_of_gpu_accepted
  destination_zero_max_gpu_accepted:
    runner: k8s
    max_accepted_gpus: 0
    scheduling:
      require:
        - test_of_gpu_accepted
  destination_with_min_mem_accepted:
    runner: k8s
    min_accepted_mem: 64
    min_accepted_gpus: 2
    scheduling:
      require:
        - test_of_mem_accepted
  destination_without_min_mem_accepted:
    runner: k8s
    scheduling:
      require:
        - test_of_mem_accepted
  destination_zero_max_mem_accepted:
    runner: k8s
    max_accepted_mem: 0
    scheduling:
      require:
        - test_of_mem_accepted
  pulsar-canberra:
    runner: k8s
    max_accepted_cores: 32
    scheduling:
      accept:
        - pulsar-canberra
  clamped_destination:
    runner: k8s
    max_accepted_cores: 32
    max_accepted_mem: 128
    max_accepted_gpus: 2
    cores: 8
    gpus: 1
    env:
      MY_DEST_ENV: "cores: {cores} mem: {mem} gpus: {gpus}"
    scheduling:
      accept:
        - test_of_resource_clamping
